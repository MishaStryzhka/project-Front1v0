{"version":3,"file":"static/js/421.4cc11a42.chunk.js","mappings":"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","sources":["images/icons/IconCheckbox.js","images/icons/IconCheckboxChack.js","components/Checkbox/Checkbox.js","components/Checkbox/Checkbox.stuled.js","components/PhoneImput/PhoneInput.styled.js","components/PhoneImput/PhoneInput.js","components/FormPatientPage/FormPatientPage.js","components/NavigationContainer/NavigationContainer.js","pages/secondaryPages/UserPage/PatientPage.jsx","components/DoctorPageContainer/DoctorPageContainer.styled.js","components/DoctorPageContainer/DoctorPageContainer.js","pages/secondaryPages/UserPage/DoctorPage.jsx","pages/secondaryPages/UserPage/UserPage.jsx","schemas/PatientPageSchema.js","schemas/RegisterSchema.js","schemas/index.js","schemas/loginSchema.js"],"sourcesContent":["import * as React from 'react';\nconst IconCheckbox = props => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={20}\n    height={20}\n    fill=\"none\"\n  >\n    <rect width={19} height={19} x={0.5} y={0.5} stroke=\"#04827A\" rx={3.5} />\n  </svg>\n);\nexport default IconCheckbox;\n","import * as React from 'react';\nconst IconCheckboxChack = props => (\n  <svg\n    {...props}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={20}\n    height={20}\n    fill=\"none\"\n  >\n    <path\n      fill=\"#04827A\"\n      d=\"M4.167 0A4.167 4.167 0 0 0 0 4.167v11.666A4.167 4.167 0 0 0 4.167 20h11.666A4.167 4.167 0 0 0 20 15.833V4.167A4.167 4.167 0 0 0 15.833 0H4.167Zm10.59 8.09-5.834 5.833a.833.833 0 0 1-1.18 0l-2.5-2.5A.833.833 0 0 1 5.833 10a.833.833 0 0 1 .59.244l1.91 1.912 5.244-5.245a.834.834 0 1 1 1.18 1.18Z\"\n    />\n  </svg>\n);\nexport default IconCheckboxChack;\n","import IconCheckbox from 'images/icons/IconCheckbox';\nimport { StyledField, StyledLabel } from './Checkbox.stuled';\nimport IconCheckboxChack from 'images/icons/IconCheckboxChack';\n\nconst Checkbox = e => {\n  return (\n    <StyledLabel\n      onChange={() =>\n        e.form.setFieldValue(\n          e.field.name,\n          e.type === 'radio' ? e.field.value : !e.field.value\n        )\n      }\n    >\n      <StyledField type={e.type} name={e.field.name} />\n      {e.type === 'radio'\n        ? (e.field.value !== e.form.values[e.field.name] && <IconCheckbox />) ||\n          (e.field.value === e.form.values[e.field.name] && (\n            <IconCheckboxChack />\n          ))\n        : (!e.field.value && <IconCheckbox />) ||\n          (e.field.value && <IconCheckboxChack />)}\n    </StyledLabel>\n  );\n};\n\nexport default Checkbox;\n","import { Field } from 'formik';\nimport { styled } from 'styled-components';\n\nexport const StyledLabel = styled.label`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nexport const StyledField = styled(Field)`\n  display: none;\n`;\n","import PhoneInput from 'react-phone-number-input';\nimport { styled } from 'styled-components';\n\nexport const StyledPhoneInput = styled(PhoneInput)`\n  ${({ disabled }) => disabled && 'pointer-events: none;'}\n  display: block;\n\n  position: relative;\n\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  letter-spacing: 0.64px;\n\n  padding: 15px;\n  width: 800px;\n  height: 50px;\n  box-sizing: border-box;\n  border-radius: 10px;\n\n  border: 1px solid\n    ${({ theme, error }) => (error ? theme.color.error : theme.color.main)};\n  outline: none;\n\n  > .PhoneInputInput {\n    color: ${({ theme, value }) => (value ? theme.color.secondary : '#adadad')};\n\n    font-family: Rubik;\n    font-size: 16px;\n    font-style: italic;\n    font-weight: 400;\n    line-height: normal;\n\n    border: 0;\n\n    outline: none;\n\n    &:focus-visible {\n      border: 3px solid ${({ theme }) => theme.color.primary} !important;\n    }\n  }\n`;\n","import React from 'react';\nimport 'react-phone-number-input/style.css';\nimport { StyledPhoneInput } from './PhoneInput.styled';\nimport ua from 'react-phone-number-input/locale/ua';\n\nconst PhoneInputField = props => {\n  const {\n    field: { name, value },\n    setFieldValue,\n    country = 'UA',\n  } = props;\n\n  const onValueChange = phoneNumber => {\n    setFieldValue(phoneNumber);\n  };\n\n  return (\n    <StyledPhoneInput\n      labels={ua}\n      name={name}\n      value={value}\n      onChange={e => onValueChange(e || '')}\n      country={country}\n    />\n  );\n};\n\nPhoneInputField.defaultProps = {\n  className: '',\n  label: '',\n  onChange: null,\n  country: 'UA',\n  disabled: false,\n};\n\nexport default PhoneInputField;\n","import {\n  Button,\n  FieldStyled,\n  FormStyled,\n  ImputWrap,\n  Label,\n  TextError,\n} from 'components/FormLogin/FormLogin.styled';\nimport PhoneInputField from 'components/PhoneImput/PhoneInput';\nimport { Formik } from 'formik';\nimport { useAuth } from 'hooks';\nimport { validationPatientPageSchema } from 'schemas';\nimport {\n  ButtonRefresh,\n  ButtonWrapper,\n  ContactMethodLabel,\n  FormDescription,\n  FormStyledPatient,\n  Placeholder,\n  RadioInputWrap,\n  RadioLabel,\n  StyledButton,\n  StyledField,\n  StyledLegend,\n  WrapInputRadio,\n  WrapPhone,\n  WrapPhoneInput,\n} from './FormPatientPage.styled';\nimport Checkbox from 'components/Checkbox/Checkbox';\nimport IconRemove from 'images/icons/IconRemove';\n\nconst FormPatientPage = ({ setOnChange }) => {\n  let { user, error } = useAuth();\n\n  const onSubmit = value => {\n    const { lastName, firstName, patronymic, phones, contactMethod } = value;\n\n    console.log(\n      'value',\n      lastName,\n      firstName,\n      patronymic,\n      phones,\n      contactMethod\n    );\n  };\n\n  const handleRefreshEmail = () => {\n    setOnChange('email');\n  };\n\n  const handleRefreshPassword = () => {\n    setOnChange('password');\n  };\n\n  const handleRemoveAccount = () => {\n    console.log('Remove account');\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: user.email,\n        password: '********',\n        lastName: '',\n        firstName: '',\n        patronymic: '',\n        phones: [],\n        contactMethod: '',\n      }}\n      validationSchema={validationPatientPageSchema}\n      onSubmit={onSubmit}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        setFieldValue,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n      }) => {\n        return (\n          <FormStyledPatient as={FormStyled} onSubmit={handleSubmit}>\n            <FormDescription>\n              <span>*</span> - обов’язкові поля\n            </FormDescription>\n            <ImputWrap>\n              <Label>\n                <FieldStyled\n                  disabled={true}\n                  error={errors.email && touched.email && errors.email}\n                  valid={values.email}\n                  type=\"email\"\n                  name=\"email\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                <ButtonRefresh type=\"button\" onClick={handleRefreshEmail}>\n                  Змінити e-mail\n                </ButtonRefresh>\n                {!values.email && <Placeholder>email</Placeholder>}\n                {errors.email && touched.email && (\n                  <TextError>{errors.email}</TextError>\n                )}\n              </Label>\n\n              <Label>\n                <FieldStyled\n                  disabled={true}\n                  error={errors.password && touched.password && errors.password}\n                  type={'password'}\n                  name=\"password\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                <ButtonRefresh type=\"button\" onClick={handleRefreshPassword}>\n                  Змінити пароль\n                </ButtonRefresh>\n                {!values.password && <Placeholder>Пароль</Placeholder>}\n                {errors.password && touched.password && (\n                  <TextError>{errors.password}</TextError>\n                )}\n                {error?.status === 401 && (\n                  <TextError>Електронна пошта або пароль неправильні</TextError>\n                )}\n              </Label>\n\n              <Label>\n                <FieldStyled\n                  error={errors.lastName && touched.lastName && errors.lastName}\n                  type={'text'}\n                  name=\"lastName\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                {!values.lastName && (\n                  <Placeholder>\n                    Прізвище <span>*</span>\n                  </Placeholder>\n                )}\n                {errors.lastName && touched.lastName && (\n                  <TextError>{errors.lastName}</TextError>\n                )}\n                {error?.status === 401 && (\n                  <TextError>Електронна пошта або пароль неправильні</TextError>\n                )}\n              </Label>\n\n              <Label>\n                <FieldStyled\n                  error={\n                    errors.firstName && touched.firstName && errors.firstName\n                  }\n                  type={'text'}\n                  name=\"firstName\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                {!values.firstName && (\n                  <Placeholder>\n                    Ім’я <span>*</span>\n                  </Placeholder>\n                )}\n                {errors.firstName && touched.firstName && (\n                  <TextError>{errors.firstName}</TextError>\n                )}\n                {error?.status === 401 && (\n                  <TextError>Електронна пошта або пароль неправильні</TextError>\n                )}\n              </Label>\n\n              <Label>\n                <FieldStyled\n                  error={\n                    errors.patronymic && touched.patronymic && errors.patronymic\n                  }\n                  type={'text'}\n                  name=\"patronymic\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                {!values.patronymic && <Placeholder>По-батькові</Placeholder>}\n                {errors.patronymic && touched.patronymic && (\n                  <TextError>{errors.patronymic}</TextError>\n                )}\n                {error?.status === 401 && (\n                  <TextError>Електронна пошта або пароль неправильні</TextError>\n                )}\n              </Label>\n\n              <WrapPhone>\n                <WrapPhoneInput>\n                  {(values.phones.length === 0\n                    ? ['']\n                    : [...(values.phones || '')]\n                  ).map(phone => {\n                    const index = values.phones.indexOf(phone);\n                    return (\n                      <Label key={values.phones.length === 0 ? 0 : index}>\n                        <FieldStyled\n                          as={PhoneInputField}\n                          field={{ name: 'phones', value: phone }}\n                          setFieldValue={value => {\n                            const newPhones = [...values.phones];\n                            if (\n                              values.phones.indexOf('') &&\n                              values.phones.indexOf('') !== index &&\n                              value === ''\n                            ) {\n                              console.log('видаляти номер?');\n\n                              newPhones.splice(index, 1);\n                            } else {\n                              if (\n                                value !== '' &&\n                                values.phones.indexOf(value) !== -1\n                              ) {\n                                console.log('Даний номер вже вказаний.');\n                                return;\n                              }\n                              newPhones.splice(index, 1, value);\n                            }\n\n                            setFieldValue(\n                              'phones',\n                              index === -1 ? [value] : newPhones\n                            );\n                          }}\n                        />\n\n                        {phone === '' && (\n                          <Placeholder type=\"tel\">\n                            +380 __ ___ ____ <span>*</span>\n                          </Placeholder>\n                        )}\n                      </Label>\n                    );\n                  })}\n                </WrapPhoneInput>\n                <ButtonRefresh\n                  disabled={\n                    values.phones.indexOf('') !== -1 ||\n                    values.phones.length === 0\n                  }\n                  type=\"button\"\n                  onClick={() => {\n                    const newPhones = [...values.phones];\n                    newPhones.push('');\n                    setFieldValue('phones', newPhones);\n                  }}\n                >\n                  + Додати номер телефону\n                </ButtonRefresh>\n              </WrapPhone>\n\n              <ContactMethodLabel>\n                <StyledLegend>Спосіб зв’язку *</StyledLegend>\n                <RadioInputWrap>\n                  <WrapInputRadio>\n                    <StyledField\n                      type=\"radio\"\n                      id=\"chat\"\n                      name=\"contactMethod\"\n                      value=\"chat\"\n                      component={Checkbox}\n                    ></StyledField>\n\n                    <RadioLabel htmlFor=\"chat\">чат</RadioLabel>\n                  </WrapInputRadio>\n                  <WrapInputRadio>\n                    <StyledField\n                      type=\"radio\"\n                      id=\"telegramBot\"\n                      name=\"contactMethod\"\n                      value=\"telegramBot\"\n                      component={Checkbox}\n                    />\n                    <RadioLabel htmlFor=\"telegramBot\">телеграм-бот</RadioLabel>\n                  </WrapInputRadio>\n                </RadioInputWrap>\n              </ContactMethodLabel>\n            </ImputWrap>\n\n            <ButtonWrapper>\n              <StyledButton type=\"button\" onClick={() => handleRemoveAccount()}>\n                <IconRemove /> Видалити акаунт\n              </StyledButton>\n              <Button type=\"submit\">Зберегти</Button>\n            </ButtonWrapper>\n          </FormStyledPatient>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default FormPatientPage;\n","const NavigationContainer = () => {\n  return (\n    <div style={{ width: 800, margin: '0 auto', paddingTop: 20 }}>\n      <p>Головна - Особистий кабінет</p>\n    </div>\n  );\n};\n\nexport default NavigationContainer;\n","import Container from 'components/Container/Container';\nimport { Title } from 'components/FormLogin/FormLogin.styled';\nimport FormPatientPage from 'components/FormPatientPage/FormPatientPage';\nimport ModalRefreshEmail from 'components/ModalRefreshEmail/ModalRefreshEmail';\nimport ModalRefreshPassword from 'components/ModalRefreshPassword/ModalRefreshPassword';\nimport NavigationContainer from 'components/NavigationContainer/NavigationContainer';\nimport { useState } from 'react';\n\nexport const PatientPage = () => {\n  const [onChange, setOnChange] = useState(null);\n\n  return (\n    <Container>\n      <Title>Особистий кабінет пацієнта</Title>\n\n      <NavigationContainer />\n\n      <FormPatientPage setOnChange={setOnChange} />\n\n      {onChange === 'email' && (\n        <ModalRefreshEmail setIsOpenModal={() => setOnChange(null)} />\n      )}\n      {onChange === 'password' && (\n        <ModalRefreshPassword setIsOpenModal={() => setOnChange(null)} />\n      )}\n    </Container>\n  );\n};\n\nexport default PatientPage;\n","import { NavLink } from 'react-router-dom';\nimport { styled } from 'styled-components';\n\nexport const StyledDoctorPageContainer = styled.div`\n  position: relative;\n\n  display: flex;\n  height: 100%;\n`;\n\nexport const SideBarDoctor = styled.div`\n  display: flex;\n  flex-direction: column;\n  row-gap: 40px;\n\n  background-color: ${({ theme }) => theme.color.background};\n\n  box-sizing: border-box;\n  width: 377px;\n  padding: 81px 117px 81px 40px;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  color: ${({ theme }) => theme.color.secondary};\n  text-align: center;\n\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 20px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n\n  display: flex;\n  width: 220px;\n  height: 50px;\n  justify-content: center;\n  align-items: center;\n\n  border-radius: 10px;\n  background-color: ${({ theme }) => theme.color.btnLight};\n\n  &.active {\n    background-color: ${({ theme }) => theme.color.btnDark};\n  }\n`;\n\nexport const MainContent = styled.div`\n  position: absolute;\n  right: 0;\n\n  box-sizing: border-box;\n  width: 1140px;\n  height: 100%;\n\n  border-top-left-radius: 40px;\n\n  background: ${({ theme }) => theme.color.primary};\n\n  padding: 0 170px;\n`;\n","import { Outlet } from 'react-router-dom';\nimport {\n  MainContent,\n  SideBarDoctor,\n  StyledDoctorPageContainer,\n  StyledNavLink,\n} from './DoctorPageContainer.styled';\nimport { Title } from 'components/FormLogin/FormLogin.styled';\nimport NavigationContainer from 'components/NavigationContainer/NavigationContainer';\n\nconst DoctorPageContainer = () => {\n  return (\n    <StyledDoctorPageContainer>\n      <SideBarDoctor>\n        <StyledNavLink to=\"accountData\">Дані акаунту</StyledNavLink>\n        <StyledNavLink to=\"personalData\">Особисті дані</StyledNavLink>\n        <StyledNavLink to=\"directionWork\">Напрямок роботи</StyledNavLink>\n        <StyledNavLink to=\"communication\">Комунікація</StyledNavLink>\n      </SideBarDoctor>\n      <MainContent>\n        <Title>Особистий кабінет лікаря</Title>\n\n        <NavigationContainer />\n\n        <Outlet />\n      </MainContent>\n    </StyledDoctorPageContainer>\n  );\n};\n\nexport default DoctorPageContainer;\n","import Container from 'components/Container/Container';\nimport DoctorPageContainer from 'components/DoctorPageContainer/DoctorPageContainer';\n\nconst DoctorPage = () => {\n  return (\n    <Container>\n      <DoctorPageContainer />\n    </Container>\n  );\n};\n\nexport default DoctorPage;\n","import PatientPage from './PatientPage';\nimport DoctorPage from './DoctorPage';\nimport { useAuth } from 'hooks';\n\nconst UserPage = () => {\n  const { userType } = useAuth();\n  console.log('userType', userType);\n\n  return userType === 'patient' ? <PatientPage /> : <DoctorPage />;\n};\n\nexport default UserPage;\n","import * as Yup from 'yup';\n\nexport const validationPatientPageSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Поле обов`язкове')\n    .email('Введіть дійсну адресу електронної пошти'),\n  password: Yup.string()\n    .required('Поле обов`язкове')\n    .min(8, 'Пароль має бути не менше 8 символів')\n    .max(32, 'Пароль має бути менше 32 символів')\n    .matches(\n      /^(?=.*[A-Z])(?=.*\\d).{8,16}$/,\n      'Пароль повинен містити мінімум 8 латинських символів, одну велику літеру, одну цифру'\n    ),\n  firstName: Yup.string()\n    .required('Поле обов`язкове')\n    .max(64, 'Пароль має бути менше 64 символів'),\n  lastName: Yup.string()\n    .required('Поле обов`язкове')\n    .max(64, 'Пароль має бути менше 64 символів'),\n  patronymic: Yup.string().max(64, 'Пароль має бути менше 64 символів'),\n  phones: Yup.array().of(\n    Yup.string()\n      .required('Поле обов`язкове')\n      .max(13, 'Номер має бути менше 13 символів')\n  ),\n  contactMethod: Yup.string(),\n});\n","import * as Yup from 'yup';\n\nexport const validationRegisterSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Поле обов`язкове')\n    .email('Введіть дійсну адресу електронної пошти'),\n  password: Yup.string()\n    .required('Поле обов`язкове')\n    .min(8, 'Пароль має бути не менше 8 символів')\n    .max(32, 'Пароль має бути менше 32 символів')\n    .matches(\n      /^(?=.*[A-Z])(?=.*\\d).{8,16}$/,\n      'Пароль повинен містити мінімум 8 латинських символів, одну велику літеру, одну цифру'\n    ),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Паролі повинні збігатися')\n    .required('Поле обов`язкове'),\n});\n","const { validationPatientPageScheme } = require('./PatientPageSchema');\nconst { validationRegisterSchema } = require('./RegisterSchema');\nconst { validationLoginSchema } = require('./loginSchema');\n\nmodule.exports = {\n  validationLoginSchema,\n  validationRegisterSchema,\n  validationPatientPageScheme,\n};\n","import * as Yup from 'yup';\n\nexport const validationLoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Поле обов`язкове')\n    .email('Введіть дійсну адресу електронної пошти'),\n  password: Yup.string()\n    .required('Поле обов`язкове')\n    .min(8, 'Пароль має бути не менше 8 символів')\n    .max(32, 'Пароль має бути менше 32 символів')\n    .matches(\n      /^(?=.*[A-Z])(?=.*\\d).{8,16}$/,\n      'Пароль повинен містити мінімум 8 латинських символів, одну велику літеру, одну цифру'\n    ),\n});\n"],"names":["props","_jsx","_objectSpread","xmlns","width","height","fill","children","x","y","stroke","rx","d","e","_jsxs","StyledLabel","onChange","form","setFieldValue","field","name","type","value","StyledField","values","IconCheckbox","IconCheckboxChack","styled","_templateObject","_taggedTemplateLiteral","Field","_templateObject2","StyledPhoneInput","PhoneInput","_ref","disabled","_ref2","theme","error","color","main","_ref3","secondary","_ref4","primary","PhoneInputField","_props$field","_props$country","country","labels","ua","defaultProps","className","label","setOnChange","_useAuth","useAuth","user","handleRefreshEmail","handleRefreshPassword","Formik","initialValues","email","password","lastName","firstName","patronymic","phones","contactMethod","validationSchema","validationPatientPageSchema","onSubmit","console","log","_error","_error2","_error3","_error4","errors","touched","handleChange","handleBlur","handleSubmit","FormStyledPatient","as","FormStyled","FormDescription","ImputWrap","Label","FieldStyled","valid","onBlur","required","ButtonRefresh","onClick","Placeholder","TextError","status","WrapPhone","WrapPhoneInput","length","_toConsumableArray","map","phone","index","indexOf","newPhones","splice","push","ContactMethodLabel","StyledLegend","RadioInputWrap","WrapInputRadio","id","component","Checkbox","RadioLabel","htmlFor","ButtonWrapper","StyledButton","IconRemove","Button","style","margin","paddingTop","_useState","useState","_useState2","_slicedToArray","Container","Title","NavigationContainer","FormPatientPage","ModalRefreshEmail","setIsOpenModal","ModalRefreshPassword","StyledDoctorPageContainer","SideBarDoctor","background","StyledNavLink","NavLink","_templateObject3","fontFamily","btnLight","_ref5","btnDark","MainContent","_templateObject4","_ref6","to","Outlet","DoctorPageContainer","userType","PatientPage","DoctorPage","Yup","shape","min","max","matches","of","validationRegisterSchema","confirmPassword","oneOf","validationPatientPageScheme","require","validationLoginSchema","module","exports"],"sourceRoot":""}