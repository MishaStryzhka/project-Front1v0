{"version":3,"file":"static/js/128.931418c1.chunk.js","mappings":"8eAIaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAYE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qGAOzBC,EAAQJ,EAAAA,GAAAA,GAASK,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kMACnB,SAAAG,GAAQ,OAAAA,EAALC,MAAkBC,MAAMC,SAAS,IAE9B,SAAAC,GAAQ,OAAAA,EAALH,MAAkBI,UAAU,IAWnCC,EAAYZ,EAAAA,GAAAA,IAAUa,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,6FAQtBW,GAAcd,EAAAA,EAAAA,IAAOe,EAAAA,GAAPf,CAAagB,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,4VACpC,SAAAc,GAAW,OAAAA,EAARC,UAA2B,uBAAuB,IAkBnD,SAAAC,GAAA,IAAGZ,EAAKY,EAALZ,MAAY,OAAAY,EAALC,MAAqBb,EAAMC,MAAMY,MAAQb,EAAMC,MAAMa,IAAI,IAG9D,SAAAC,GAAQ,OAAAA,EAALf,MAAkBC,MAAMe,SAAS,IAGlCC,EAAsBxB,EAAAA,GAAAA,MAAYyB,IAAAA,GAAAtB,EAAAA,EAAAA,GAAA,sGAQlCuB,GAAsB1B,EAAAA,EAAAA,IAAOe,EAAAA,GAAPf,CAAa2B,IAAAA,GAAAxB,EAAAA,EAAAA,GAAA,iIAOnCyB,EAAQ5B,EAAAA,GAAAA,MAAY6B,IAAAA,GAAA1B,EAAAA,EAAAA,GAAA,iCAIpB2B,EAAS9B,EAAAA,GAAAA,OAAa+B,IAAAA,GAAA5B,EAAAA,EAAAA,GAAA,6VAGlB,SAAA6B,GAAQ,OAAAA,EAALzB,MAAkBI,UAAU,IAarC,SAAAsB,GAAQ,OAAAA,EAAL1B,MAAkBC,MAAMC,SAAS,IACzB,SAAAyB,GAAQ,OAAAA,EAAL3B,MAAkBC,MAAM2B,aAAa,IAExC,SAAAC,GAAQ,OAAAA,EAAL7B,MAAkBC,MAAM2B,aAAa,IAIjDE,GAAwBrC,EAAAA,EAAAA,IAAOsC,EAAAA,GAAPtC,CAAeuC,IAAAA,GAAApC,EAAAA,EAAAA,GAAA,2OAIzC,SAAAqC,GAAQ,OAAAA,EAALjC,MAAkBC,MAAMa,IAAI,IAEzB,SAAAoB,GAAQ,OAAAA,EAALlC,MAAkBI,UAAU,IAWnC+B,GAAgB1C,EAAAA,EAAAA,IAAOsC,EAAAA,GAAPtC,CAAe2C,IAAAA,GAAAxC,EAAAA,EAAAA,GAAA,6SAC3B,SAAAyC,GAAQ,OAAAA,EAALrC,MAAkBI,UAAU,IAarC,SAAAkC,GAAQ,OAAAA,EAALtC,MAAkBC,MAAMC,SAAS,IAEzB,SAAAqC,GAAQ,OAAAA,EAALvC,MAAkBC,MAAM2B,aAAa,IAejDY,GAXO/C,EAAAA,GAAAA,EAAQgD,IAAAA,GAAA7C,EAAAA,EAAAA,GAAA,sKAWHH,EAAAA,GAAAA,EAAQiD,IAAAA,GAAA9C,EAAAA,EAAAA,GAAA,kLACtB,SAAA+C,GAAQ,OAAAA,EAAL3C,MAAkBC,MAAMY,KAAK,IAI1B,SAAA+B,GAAQ,OAAAA,EAAL5C,MAAkBI,UAAU,KA2BnCyC,GApBcpD,EAAAA,GAAAA,IAAUqD,IAAAA,GAAAlD,EAAAA,EAAAA,GAAA,iIAM1B,SAAAmD,GAAQ,OAAAA,EAAL/C,MAAkBC,MAAM+C,SAAS,IAGtBvD,EAAAA,GAAAA,IAAUwD,IAAAA,GAAArD,EAAAA,EAAAA,GAAA,6JAWZH,EAAAA,GAAAA,IAAUyD,IAAAA,GAAAtD,EAAAA,EAAAA,GAAA,mJASpBuD,EAAe1D,EAAAA,GAAAA,KAAW2D,IAAAA,GAAAxD,EAAAA,EAAAA,GAAA,wIAC5B,SAAAyD,GAAQ,OAAAA,EAALrD,MAAkBC,MAAMa,IAAI,IAEzB,SAAAwC,GAAQ,OAAAA,EAALtD,MAAkBI,UAAU,G,oKC7LnCmD,GAAmB9D,EAAAA,EAAAA,IAAO+D,EAAAA,GAAP/D,CAAkBE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,umBAC9C,SAAAG,GAAW,OAAAA,EAARY,UAA2B,uBAAuB,IAkBnD,SAAAR,GAAA,IAAGH,EAAKG,EAALH,MAAY,OAAAG,EAALU,MAAqBb,EAAMC,MAAMY,MAAQb,EAAMC,MAAMa,IAAI,IAI5D,SAAAJ,GAAA,IAAGV,EAAKU,EAALV,MAAY,OAAAU,EAAL+C,MAAqBzD,EAAMC,MAAMC,UAAY,SAAS,IAanD,SAAAU,GAAQ,OAAAA,EAALZ,MAAkBC,MAAMyD,OAAO,I,oBClCtDC,EAAkB,SAAAC,GACtB,IAAAC,EAKID,EAJFE,MAASC,EAAIF,EAAJE,KAAMN,EAAKI,EAALJ,MACPO,EAGNJ,EAHFK,KAAQD,cAAaE,EAGnBN,EAFFO,QAAAA,OAAO,IAAAD,EAAG,KAAIA,EACdE,EACER,EADFQ,SAWF,OACEC,EAAAA,EAAAA,KAACd,EAAgB,CACfe,OAAQC,EAAAA,EAERR,KAAMA,EACNN,MAAOA,EACPW,SAdkB,SAAAI,GACpBR,EAAcD,EAAMS,GAEH,OAAbJ,GACFA,EAASI,EAEb,EASIL,QAASA,GAGf,EAEAR,EAAgBc,aAAe,CAC7BC,UAAW,GACXC,MAAO,GACPP,SAAU,KACVD,QAAS,KACTxD,UAAU,GAGZ,I,QAAA,I,8BCvCaiE,EAAoBnF,EAAAA,GAAAA,KAAWE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,gCAI/BiF,EAAkBpF,EAAAA,GAAAA,EAAQK,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,+LAG5B,SAAAG,GAAQ,OAAAA,EAALC,MAAkBC,MAAM6E,WAAW,IAEhC,SAAA3E,GAAQ,OAAAA,EAALH,MAAkBI,UAAU,IAWnC2E,EAActF,EAAAA,GAAAA,EAAQa,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,4PACxB,SAAAc,GAAQ,OAAAA,EAALV,MAAkBC,MAAM6E,WAAW,IAEhC,SAAAlE,GAAQ,OAAAA,EAALZ,MAAkBI,UAAU,IAUtC,SAAAW,GAAO,MAAiB,QAAjBA,EAAJiE,KAA6B,OAAS,MAAM,IAO5CC,EAAgBxF,EAAAA,GAAAA,OAAagB,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,0NAG/B,SAAA6B,GAAQ,OAAAA,EAALzB,MAAkBC,MAAMC,SAAS,IAE9B,SAAAwB,GAAQ,OAAAA,EAAL1B,MAAkBI,UAAU,ICsKhD,EAnMwB,WACtB,IAAA8E,GAAsBC,EAAAA,EAAAA,KAAhBC,EAAIF,EAAJE,KAAMvE,EAAKqE,EAALrE,MAMNwE,EAAqB,WACzBC,QAAQC,IAAI,gBACd,EAEMC,EAAwB,WAC5BF,QAAQC,IAAI,mBACd,EAEME,EAAuB,WAC3BH,QAAQC,IAAI,mBACd,EAEA,OACElB,EAAAA,EAAAA,KAACqB,EAAAA,GAAM,CACLC,cAAe,CACbC,MAAOR,EAAKQ,MACZC,SAAU,GACVC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,QAAS,GACTC,OAAQ,GACRC,cAAe,IAEjBC,iBAAkBC,EAAAA,4BAClBC,SA7Ba,SAAA7C,GACf6B,QAAQC,IAAI,QAAS9B,EACvB,EA2BuB8C,SAElB,SAAAxG,GAQM,IAADyG,EAAAC,EAAAC,EAAAC,EAPJC,EAAM7G,EAAN6G,OACAC,EAAM9G,EAAN8G,OACAC,EAAO/G,EAAP+G,QACA9C,EAAajE,EAAbiE,cACA+C,EAAYhH,EAAZgH,aACAC,EAAUjH,EAAViH,WACAC,EAAYlH,EAAZkH,aAEA,OACEC,EAAAA,EAAAA,MAACtC,EAAiB,CAACuC,GAAI3H,EAAAA,GAAY8G,SAAUW,EAAaV,SAAA,EACxDW,EAAAA,EAAAA,MAACrC,EAAe,CAAA0B,SAAA,EACdlC,EAAAA,EAAAA,KAAA,QAAAkC,SAAM,MAAQ,qGAEhBW,EAAAA,EAAAA,MAAC7G,EAAAA,GAAS,CAAAkG,SAAA,EACRW,EAAAA,EAAAA,MAAC7F,EAAAA,GAAK,CAAAkF,SAAA,EACJlC,EAAAA,EAAAA,KAAC9D,EAAAA,GAAW,CACVI,UAAU,EACVE,MAAOgG,EAAOjB,OAASkB,EAAQlB,OAASiB,EAAOjB,MAC/CwB,MAAOR,EAAOhB,MACdZ,KAAK,QACLjB,KAAK,QACLK,SAAU,SAAAiD,GACRxG,EAAQ,KACRkG,EAAaM,EACf,EACAC,OAAQN,EACRO,UAAQ,KAEVlD,EAAAA,EAAAA,KAACY,EAAa,CAACD,KAAK,SAASwC,QAASnC,EAAmBkB,SAAC,uDAGxDK,EAAOhB,QAASvB,EAAAA,EAAAA,KAACU,EAAW,CAAAwB,SAAC,UAC9BM,EAAOjB,OAASkB,EAAQlB,QACvBvB,EAAAA,EAAAA,KAAC7B,EAAAA,GAAS,CAAA+D,SAAEM,EAAOjB,YAIvBsB,EAAAA,EAAAA,MAAC7F,EAAAA,GAAK,CAAAkF,SAAA,EACJlC,EAAAA,EAAAA,KAAC9D,EAAAA,GAAW,CACVI,UAAU,EACVE,MAAOgG,EAAOhB,UAAYiB,EAAQjB,UAAYgB,EAAOhB,SACrDb,KAAM,WACNjB,KAAK,WACLK,SAAU,SAAAiD,GACRxG,EAAQ,KACRkG,EAAaM,EACf,EACAC,OAAQN,EACRO,UAAQ,KAEVlD,EAAAA,EAAAA,KAACY,EAAa,CAACD,KAAK,SAASwC,QAAShC,EAAsBe,SAAC,qFAG3DK,EAAOf,WAAYxB,EAAAA,EAAAA,KAACU,EAAW,CAAAwB,SAAC,yCACjCM,EAAOhB,UAAYiB,EAAQjB,WAC1BxB,EAAAA,EAAAA,KAAC7B,EAAAA,GAAS,CAAA+D,SAAEM,EAAOhB,WAEF,OAAb,QAALW,EAAA3F,SAAK,IAAA2F,OAAA,EAALA,EAAOiB,UACNpD,EAAAA,EAAAA,KAAC7B,EAAAA,GAAS,CAAA+D,SAAC,+NAIfW,EAAAA,EAAAA,MAAC7F,EAAAA,GAAK,CAAAkF,SAAA,EACJlC,EAAAA,EAAAA,KAAC9D,EAAAA,GAAW,CACVM,MAAOgG,EAAOf,UAAYgB,EAAQhB,UAAYe,EAAOf,SACrDd,KAAM,OACNjB,KAAK,WACLK,SAAU,SAAAiD,GACRxG,EAAQ,KACRkG,EAAaM,EACf,EACAC,OAAQN,EACRO,UAAQ,KAERX,EAAOd,WACPoB,EAAAA,EAAAA,MAACnC,EAAW,CAAAwB,SAAA,CAAC,qDACFlC,EAAAA,EAAAA,KAAA,QAAAkC,SAAM,SAGlBM,EAAOf,UAAYgB,EAAQhB,WAC1BzB,EAAAA,EAAAA,KAAC7B,EAAAA,GAAS,CAAA+D,SAAEM,EAAOf,WAEF,OAAb,QAALW,EAAA5F,SAAK,IAAA4F,OAAA,EAALA,EAAOgB,UACNpD,EAAAA,EAAAA,KAAC7B,EAAAA,GAAS,CAAA+D,SAAC,+NAIfW,EAAAA,EAAAA,MAAC7F,EAAAA,GAAK,CAAAkF,SAAA,EACJlC,EAAAA,EAAAA,KAAC9D,EAAAA,GAAW,CACVM,MACEgG,EAAOd,WAAae,EAAQf,WAAac,EAAOd,UAElDf,KAAM,OACNjB,KAAK,YACLK,SAAU,SAAAiD,GACRxG,EAAQ,KACRkG,EAAaM,EACf,EACAC,OAAQN,EACRO,UAAQ,KAERX,EAAOb,YACPmB,EAAAA,EAAAA,MAACnC,EAAW,CAAAwB,SAAA,CAAC,6BACNlC,EAAAA,EAAAA,KAAA,QAAAkC,SAAM,SAGdM,EAAOd,WAAae,EAAQf,YAC3B1B,EAAAA,EAAAA,KAAC7B,EAAAA,GAAS,CAAA+D,SAAEM,EAAOd,YAEF,OAAb,QAALW,EAAA7F,SAAK,IAAA6F,OAAA,EAALA,EAAOe,UACNpD,EAAAA,EAAAA,KAAC7B,EAAAA,GAAS,CAAA+D,SAAC,+NAIfW,EAAAA,EAAAA,MAAC7F,EAAAA,GAAK,CAAAkF,SAAA,EACJlC,EAAAA,EAAAA,KAAC9D,EAAAA,GAAW,CACVM,MACEgG,EAAOb,YAAcc,EAAQd,YAAca,EAAOb,WAEpDhB,KAAM,OACNjB,KAAK,aACLK,SAAU,SAAAiD,GACRxG,EAAQ,KACRkG,EAAaM,EACf,EACAC,OAAQN,EACRO,UAAQ,KAERX,EAAOZ,aAAc3B,EAAAA,EAAAA,KAACU,EAAW,CAAAwB,SAAC,kEACnCM,EAAOb,YAAcc,EAAQd,aAC5B3B,EAAAA,EAAAA,KAAC7B,EAAAA,GAAS,CAAA+D,SAAEM,EAAOb,aAEF,OAAb,QAALW,EAAA9F,SAAK,IAAA8F,OAAA,EAALA,EAAOc,UACNpD,EAAAA,EAAAA,KAAC7B,EAAAA,GAAS,CAAA+D,SAAC,+NAIfW,EAAAA,EAAAA,MAAC7F,EAAAA,GAAK,CAAAkF,SAAA,EACJlC,EAAAA,EAAAA,KAAC9D,EAAAA,GAAW,CACV4G,GAAIxD,EACJG,MAAO,CAAEC,KAAM,SAAUN,MAAOmD,EAAOV,QACvCjC,KAAM,CAAED,cAAAA,MAER4C,EAAOV,SACPgB,EAAAA,EAAAA,MAACnC,EAAW,CAACC,KAAK,MAAKuB,SAAA,CAAC,qBACLlC,EAAAA,EAAAA,KAAA,QAAAkC,SAAM,UAG3BlC,EAAAA,EAAAA,KAACY,EAAa,CAACD,KAAK,SAASwC,QAAS/B,EAAqBc,SAAC,mIAOtE,GAGN,EC3MA,EAR4B,WAC1B,OACElC,EAAAA,EAAAA,KAAA,OAAKqD,MAAO,CAAEC,MAAO,IAAKC,OAAQ,SAAUC,WAAY,IAAKtB,UAC3DlC,EAAAA,EAAAA,KAAA,KAAAkC,SAAG,oJAGT,ECWA,EAZ2B,WACzB,OACEW,EAAAA,EAAAA,MAACY,EAAAA,EAAS,CAAAvB,SAAA,EACRlC,EAAAA,EAAAA,KAACxE,EAAAA,GAAK,CAAA0G,SAAC,wJAEPlC,EAAAA,EAAAA,KAAC0D,EAAmB,KAEpB1D,EAAAA,EAAAA,KAAC2D,EAAe,MAGtB,ECXA,EAJmB,WACjB,OAAO3D,EAAAA,EAAAA,KAAA,KAAAkC,SAAG,cACZ,ECOA,EALiB,WAEf,MAAoB,aADC0B,EAAAA,EAAAA,MAAbC,UACwB7D,EAAAA,EAAAA,KAAC8D,EAAW,KAAM9D,EAAAA,EAAAA,KAAC+D,EAAU,GAC/D,C,mHCLa/B,EAA8BgC,EAAAA,KAAaC,MAAM,CAC5D1C,MAAOyC,EAAAA,KACJd,SAAS,0FACT3B,MAAM,0NACTC,SAAUwC,EAAAA,KACPd,SAAS,0FACTgB,IAAI,EAAG,mLACPC,IAAI,GAAI,uKACRC,QACC,+BACA,ub,gHCVOC,EAA2BL,EAAAA,KAAaC,MAAM,CACzD1C,MAAOyC,EAAAA,KACJd,SAAS,0FACT3B,MAAM,0NACTC,SAAUwC,EAAAA,KACPd,SAAS,0FACTgB,IAAI,EAAG,mLACPC,IAAI,GAAI,uKACRC,QACC,+BACA,sbAEJE,gBAAiBN,EAAAA,KACdO,MAAM,CAACP,EAAAA,GAAQ,YAAa,MAAO,0IACnCd,SAAS,2F,uBChBd,IAAQlB,EAAgCwC,EAAQ,MAAxCxC,4BACAqC,EAA6BG,EAAQ,MAArCH,yBACAI,EAA0BD,EAAQ,MAAlCC,sBAERC,EAAOC,QAAU,CACfF,sBAAAA,EACAJ,yBAAAA,EACArC,4BAAAA,E,6GCLWyC,EAAwBT,EAAAA,KAAaC,MAAM,CACtD1C,MAAOyC,EAAAA,KACJd,SAAS,0FACT3B,MAAM,0NACTC,SAAUwC,EAAAA,KACPd,SAAS,0FACTgB,IAAI,EAAG,mLACPC,IAAI,GAAI,uKACRC,QACC,+BACA,ub","sources":["components/FormLogin/FormLogin.styled.js","components/PhoneImput/PhoneInput.styled.js","components/PhoneImput/PhoneInput.js","components/FormPatientPage/FormPatientPage.styled.js","components/FormPatientPage/FormPatientPage.js","components/NavigationContainer/NavigationContainer.js","pages/secondaryPages/UserPage/PatientPage.jsx","pages/secondaryPages/UserPage/DoctorPage.jsx","pages/secondaryPages/UserPage/UserPage.jsx","schemas/PatientPageScheme.js","schemas/RegisterSchema.js","schemas/index.js","schemas/loginSchema.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\nimport { Form, Field } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  padding-top: 75px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Title = styled.h2`\n  color: ${({ theme }) => theme.color.secondary};\n\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 24px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n\n  padding-top: 75px;\n  margin: auto;\n  width: 800px;\n`;\n\nexport const ImputWrap = styled.div`\n  padding-top: 26px;\n\n  display: flex;\n  flex-direction: column;\n  gap: 40px;\n`;\n\nexport const FieldStyled = styled(Field)`\n  ${({ disabled }) => disabled && 'pointer-events: none;'}\n  display: block;\n\n  position: relative;\n\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  letter-spacing: 0.64px;\n\n  padding: 15px;\n  width: 800px;\n  height: 50px;\n  box-sizing: border-box;\n  border-radius: 10px;\n\n  border: 1px solid\n    ${({ theme, error }) => (error ? theme.color.error : theme.color.main)};\n  outline: none;\n\n  color: ${({ theme }) => theme.color.btnLogOut};\n`;\n\nexport const LabelCheckboxStyled = styled.label`\n  display: flex;\n  column-gap: 20px;\n  padding-top: 22px;\n\n  // background-color: red;\n`;\n\nexport const FieldCheckboxStyled = styled(Field)`\n  // height: 20px;\n  // width: 20px;\n  // background: url('unchecked.png') no-repeat left center;\n  display: none;\n`;\n\nexport const Label = styled.label`\n  position: relative;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n\n  display: flex;\n  align-items: center;\n\n  padding: 18px 36px;\n  height: 57px;\n  box-sizing: border-box;\n\n  color: ${({ theme }) => theme.color.secondary};\n  background-color: ${({ theme }) => theme.color.secondaryMain};\n\n  border: 3px solid ${({ theme }) => theme.color.secondaryMain};\n  border-radius: 10px;\n`;\n\nexport const StyledRefreshPassword = styled(NavLink)`\n  width: 800px;\n  padding-top: 20px;\n\n  color: ${({ theme }) => theme.color.main};\n\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n\n  &:hover {\n    text-decoration-line: underline;\n  }\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n\n  display: flex;\n  align-items: center;\n\n  padding: 18px 36px;\n  height: 57px;\n  box-sizing: border-box;\n\n  color: ${({ theme }) => theme.color.secondary};\n\n  border: 3px solid ${({ theme }) => theme.color.secondaryMain};\n  border-radius: 10px;\n`;\n\nexport const Text = styled.p`\n  text-align: center;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: 0.48px;\n\n  color: #888;\n`;\n\nexport const TextError = styled.p`\n  color: ${({ theme }) => theme.color.error};\n  margin-top: 4px;\n  margin-left: 16px;\n\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 12px;\n  font-style: italic;\n  font-weight: 400;\n  line-height: normal;\n`;\n\nexport const SuccessText = styled.div`\n  margin-top: 4px;\n  margin-left: 16px;\n  font-size: 12px;\n  line-height: 1.3;\n  font-weight: 400;\n  color: ${({ theme }) => theme.color.indicator};\n`;\n\nexport const WrapIcons = styled.div`\n  position: absolute;\n  top: 12px;\n  right: 16px;\n  display: flex;\n  gap: 8px;\n  @media screen and (min-width: 768px) {\n    gap: 15px;\n  }\n`;\n\nexport const NavWrap = styled.div`\n  display: flex;\n  justify-content: center;\n  box-sizing: border-box;\n  column-gap: 80px;\n  // width: 800px;\n  padding-top: 52px;\n`;\n\nexport const TextCheckbox = styled.span`\n  color: ${({ theme }) => theme.color.main};\n\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 16px;\n  font-style: italic;\n  font-weight: 400;\n  line-height: normal;\n`;\n","import PhoneInput from 'react-phone-number-input';\nimport { styled } from 'styled-components';\n\nexport const StyledPhoneInput = styled(PhoneInput)`\n  ${({ disabled }) => disabled && 'pointer-events: none;'}\n  display: block;\n\n  position: relative;\n\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  letter-spacing: 0.64px;\n\n  padding: 15px;\n  width: 800px;\n  height: 50px;\n  box-sizing: border-box;\n  border-radius: 10px;\n\n  border: 1px solid\n    ${({ theme, error }) => (error ? theme.color.error : theme.color.main)};\n  outline: none;\n\n  > .PhoneInputInput {\n    color: ${({ theme, value }) => (value ? theme.color.secondary : '#adadad')};\n\n    font-family: Rubik;\n    font-size: 16px;\n    font-style: italic;\n    font-weight: 400;\n    line-height: normal;\n\n    border: 0;\n\n    outline: none;\n\n    &:focus-visible {\n      border: 3px solid ${({ theme }) => theme.color.primary} !important;\n    }\n  }\n`;\n","import React from 'react';\nimport 'react-phone-number-input/style.css';\nimport { StyledPhoneInput } from './PhoneInput.styled';\nimport ua from 'react-phone-number-input/locale/ua';\n\nconst PhoneInputField = props => {\n  const {\n    field: { name, value },\n    form: { setFieldValue },\n    country = 'UA',\n    onChange,\n  } = props;\n\n  const onValueChange = phoneNumber => {\n    setFieldValue(name, phoneNumber);\n\n    if (onChange !== null) {\n      onChange(phoneNumber);\n    }\n  };\n\n  return (\n    <StyledPhoneInput\n      labels={ua}\n      // placeholder=\"+380 __ ___ ____ *\"\n      name={name}\n      value={value}\n      onChange={onValueChange}\n      country={country}\n    />\n  );\n};\n\nPhoneInputField.defaultProps = {\n  className: '',\n  label: '',\n  onChange: null,\n  country: 'UA',\n  disabled: false,\n};\n\nexport default PhoneInputField;\n","import { styled } from 'styled-components';\n\nexport const FormStyledPatient = styled.form`\n  padding-top: 40px;\n`;\n\nexport const FormDescription = styled.p`\n  width: 800px;\n\n  color: ${({ theme }) => theme.color.placeholder};\n\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 16px;\n  font-style: italic;\n  font-weight: 400;\n  line-height: normal;\n\n  > span {\n    color: red;\n  }\n`;\n\nexport const Placeholder = styled.p`\n  color: ${({ theme }) => theme.color.placeholder};\n\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 16px;\n  font-style: italic;\n  font-weight: 400;\n  line-height: normal;\n\n  pointer-events: none;\n\n  position: absolute;\n  top: 15px;\n  left: ${({ type }) => (type === 'tel' ? '61px' : '17px')};\n\n  > span {\n    color: red;\n  }\n`;\n\nexport const ButtonRefresh = styled.button`\n  padding-top: 10px;\n\n  color: ${({ theme }) => theme.color.secondary};\n\n  font-family: ${({ theme }) => theme.fontFamily};\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n\n  &:hover {\n    text-decoration-line: underline;\n  }\n`;\n","import {\n  FieldStyled,\n  FormStyled,\n  ImputWrap,\n  Label,\n  TextError,\n} from 'components/FormLogin/FormLogin.styled';\nimport PhoneInputField from 'components/PhoneImput/PhoneInput';\nimport { Formik } from 'formik';\nimport { useAuth } from 'hooks';\nimport { validationPatientPageScheme } from 'schemas';\nimport {\n  ButtonRefresh,\n  FormDescription,\n  FormStyledPatient,\n  Placeholder,\n} from './FormPatientPage.styled';\n\nconst FormPatientPage = () => {\n  let { user, error } = useAuth();\n\n  const onSubmit = value => {\n    console.log('value', value);\n  };\n\n  const handleRefreshEmail = () => {\n    console.log('refresh email');\n  };\n\n  const handleRefreshPassword = () => {\n    console.log('refresh password');\n  };\n\n  const handleAddPhoneNumber = () => {\n    console.log('add phone number');\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        email: user.email,\n        password: '',\n        lastName: '',\n        firstName: '',\n        patronymic: '',\n        control: '',\n        phone1: '',\n        contactMethod: '',\n      }}\n      validationSchema={validationPatientPageScheme}\n      onSubmit={onSubmit}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        setFieldValue,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n      }) => {\n        return (\n          <FormStyledPatient as={FormStyled} onSubmit={handleSubmit}>\n            <FormDescription>\n              <span>*</span> - обов’язкові поля\n            </FormDescription>\n            <ImputWrap>\n              <Label>\n                <FieldStyled\n                  disabled={true}\n                  error={errors.email && touched.email && errors.email}\n                  valid={values.email}\n                  type=\"email\"\n                  name=\"email\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                <ButtonRefresh type=\"button\" onClick={handleRefreshEmail}>\n                  Змінити e-mail\n                </ButtonRefresh>\n                {!values.email && <Placeholder>email</Placeholder>}\n                {errors.email && touched.email && (\n                  <TextError>{errors.email}</TextError>\n                )}\n              </Label>\n\n              <Label>\n                <FieldStyled\n                  disabled={true}\n                  error={errors.password && touched.password && errors.password}\n                  type={'password'}\n                  name=\"password\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                <ButtonRefresh type=\"button\" onClick={handleRefreshPassword}>\n                  Змінити пароль\n                </ButtonRefresh>\n                {!values.password && <Placeholder>Пароль</Placeholder>}\n                {errors.password && touched.password && (\n                  <TextError>{errors.password}</TextError>\n                )}\n                {error?.status === 401 && (\n                  <TextError>Електронна пошта або пароль неправильні</TextError>\n                )}\n              </Label>\n\n              <Label>\n                <FieldStyled\n                  error={errors.lastName && touched.lastName && errors.lastName}\n                  type={'text'}\n                  name=\"lastName\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                {!values.lastName && (\n                  <Placeholder>\n                    Прізвище <span>*</span>\n                  </Placeholder>\n                )}\n                {errors.lastName && touched.lastName && (\n                  <TextError>{errors.lastName}</TextError>\n                )}\n                {error?.status === 401 && (\n                  <TextError>Електронна пошта або пароль неправильні</TextError>\n                )}\n              </Label>\n\n              <Label>\n                <FieldStyled\n                  error={\n                    errors.firstName && touched.firstName && errors.firstName\n                  }\n                  type={'text'}\n                  name=\"firstName\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                {!values.firstName && (\n                  <Placeholder>\n                    Ім’я <span>*</span>\n                  </Placeholder>\n                )}\n                {errors.firstName && touched.firstName && (\n                  <TextError>{errors.firstName}</TextError>\n                )}\n                {error?.status === 401 && (\n                  <TextError>Електронна пошта або пароль неправильні</TextError>\n                )}\n              </Label>\n\n              <Label>\n                <FieldStyled\n                  error={\n                    errors.patronymic && touched.patronymic && errors.patronymic\n                  }\n                  type={'text'}\n                  name=\"patronymic\"\n                  onChange={e => {\n                    error = null;\n                    handleChange(e);\n                  }}\n                  onBlur={handleBlur}\n                  required\n                />\n                {!values.patronymic && <Placeholder>По-батькові</Placeholder>}\n                {errors.patronymic && touched.patronymic && (\n                  <TextError>{errors.patronymic}</TextError>\n                )}\n                {error?.status === 401 && (\n                  <TextError>Електронна пошта або пароль неправильні</TextError>\n                )}\n              </Label>\n\n              <Label>\n                <FieldStyled\n                  as={PhoneInputField}\n                  field={{ name: 'phone1', value: values.phone1 }}\n                  form={{ setFieldValue }}\n                />\n                {!values.phone1 && (\n                  <Placeholder type=\"tel\">\n                    +380 __ ___ ____ <span>*</span>\n                  </Placeholder>\n                )}\n                <ButtonRefresh type=\"button\" onClick={handleAddPhoneNumber}>\n                  + Додати номер телефону\n                </ButtonRefresh>\n              </Label>\n            </ImputWrap>\n          </FormStyledPatient>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default FormPatientPage;\n","const NavigationContainer = () => {\n  return (\n    <div style={{ width: 800, margin: '0 auto', paddingTop: 20 }}>\n      <p>Головна - Особистий кабінет</p>\n    </div>\n  );\n};\n\nexport default NavigationContainer;\n","import Container from 'components/Container/Container';\nimport { Title } from 'components/FormLogin/FormLogin.styled';\nimport FormPatientPage from 'components/FormPatientPage/FormPatientPage';\nimport NavigationContainer from 'components/NavigationContainer/NavigationContainer';\n\nexport const PatientPage = () => {\n  return (\n    <Container>\n      <Title>Особистий кабінет пацієнта</Title>\n\n      <NavigationContainer />\n\n      <FormPatientPage />\n    </Container>\n  );\n};\n\nexport default PatientPage;\n","const DoctorPage = () => {\n  return <p>DoctorPage</p>;\n};\n\nexport default DoctorPage;\n","import { useParams } from 'react-router-dom';\nimport PatientPage from './PatientPage';\nimport DoctorPage from './DoctorPage';\n\nconst UserPage = () => {\n  const { userType } = useParams();\n  return userType === 'patient' ? <PatientPage /> : <DoctorPage />;\n};\n\nexport default UserPage;\n","import * as Yup from 'yup';\n\nexport const validationPatientPageScheme = Yup.object().shape({\n  email: Yup.string()\n    .required('Поле обов`язкове')\n    .email('Введіть дійсну адресу електронної пошти'),\n  password: Yup.string()\n    .required('Поле обов`язкове')\n    .min(8, 'Пароль має бути не менше 8 символів')\n    .max(32, 'Пароль має бути менше 32 символів')\n    .matches(\n      /^(?=.*[A-Z])(?=.*\\d).{8,16}$/,\n      'Пароль повинен містити мінімум 8 латинських символів, одну велику літеру, одну цифру'\n    ),\n});\n","import * as Yup from 'yup';\n\nexport const validationRegisterSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Поле обов`язкове')\n    .email('Введіть дійсну адресу електронної пошти'),\n  password: Yup.string()\n    .required('Поле обов`язкове')\n    .min(8, 'Пароль має бути не менше 8 символів')\n    .max(32, 'Пароль має бути менше 32 символів')\n    .matches(\n      /^(?=.*[A-Z])(?=.*\\d).{8,16}$/,\n      'Пароль повинен містити мінімум 8 латинських символів, одну велику літеру, одну цифру'\n    ),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Паролі повинні збігатися')\n    .required('Поле обов`язкове'),\n});\n","const { validationPatientPageScheme } = require('./PatientPageScheme');\nconst { validationRegisterSchema } = require('./RegisterSchema');\nconst { validationLoginSchema } = require('./loginSchema');\n\nmodule.exports = {\n  validationLoginSchema,\n  validationRegisterSchema,\n  validationPatientPageScheme,\n};\n","import * as Yup from 'yup';\n\nexport const validationLoginSchema = Yup.object().shape({\n  email: Yup.string()\n    .required('Поле обов`язкове')\n    .email('Введіть дійсну адресу електронної пошти'),\n  password: Yup.string()\n    .required('Поле обов`язкове')\n    .min(8, 'Пароль має бути не менше 8 символів')\n    .max(32, 'Пароль має бути менше 32 символів')\n    .matches(\n      /^(?=.*[A-Z])(?=.*\\d).{8,16}$/,\n      'Пароль повинен містити мінімум 8 латинських символів, одну велику літеру, одну цифру'\n    ),\n});\n"],"names":["FormStyled","styled","Form","_templateObject","_taggedTemplateLiteral","Title","_templateObject2","_ref","theme","color","secondary","_ref2","fontFamily","ImputWrap","_templateObject3","FieldStyled","Field","_templateObject4","_ref3","disabled","_ref4","error","main","_ref5","btnLogOut","LabelCheckboxStyled","_templateObject5","FieldCheckboxStyled","_templateObject6","Label","_templateObject7","Button","_templateObject8","_ref6","_ref7","_ref8","secondaryMain","_ref9","StyledRefreshPassword","NavLink","_templateObject9","_ref10","_ref11","StyledNavLink","_templateObject10","_ref12","_ref13","_ref14","TextError","_templateObject11","_templateObject12","_ref15","_ref16","NavWrap","_templateObject13","_ref17","indicator","_templateObject14","_templateObject15","TextCheckbox","_templateObject16","_ref18","_ref19","StyledPhoneInput","PhoneInput","value","primary","PhoneInputField","props","_props$field","field","name","setFieldValue","form","_props$country","country","onChange","_jsx","labels","ua","phoneNumber","defaultProps","className","label","FormStyledPatient","FormDescription","placeholder","Placeholder","type","ButtonRefresh","_useAuth","useAuth","user","handleRefreshEmail","console","log","handleRefreshPassword","handleAddPhoneNumber","Formik","initialValues","email","password","lastName","firstName","patronymic","control","phone1","contactMethod","validationSchema","validationPatientPageScheme","onSubmit","children","_error","_error2","_error3","_error4","values","errors","touched","handleChange","handleBlur","handleSubmit","_jsxs","as","valid","e","onBlur","required","onClick","status","style","width","margin","paddingTop","Container","NavigationContainer","FormPatientPage","useParams","userType","PatientPage","DoctorPage","Yup","shape","min","max","matches","validationRegisterSchema","confirmPassword","oneOf","require","validationLoginSchema","module","exports"],"sourceRoot":""}