{"version":3,"file":"static/js/677.812fefca.chunk.js","mappings":"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","sources":["components/AccountData/AccountData.styled.js","components/AccountData/AccountData.js"],"sourcesContent":["import { ImputWrap } from 'components/FormLogin/FormLogin.styled';\nimport { ButtonWrapper } from 'components/FormPatientPage/FormPatientPage.styled';\nimport { styled } from 'styled-components';\n\nexport const StyledImputWrap = styled(ImputWrap)`\n  padding-top: 0;\n`;\n\nexport const StyledButtonWrapper = styled(ButtonWrapper)`\n  flex-direction: column;\n  row-gap: 80px;\n`;\n\nexport const BtnBox = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n","import {\n  Button,\n  FieldStyled,\n  FormStyled,\n  Label,\n  TextError,\n} from 'components/FormLogin/FormLogin.styled';\nimport {\n  ButtonRefresh,\n  FormStyledPatient,\n  Placeholder,\n  StyledButton,\n} from 'components/FormPatientPage/FormPatientPage.styled';\nimport ModalRefreshEmail from 'components/ModalRefreshEmail/ModalRefreshEmail';\nimport ModalRefreshPassword from 'components/ModalRefreshPassword/ModalRefreshPassword';\nimport { Formik } from 'formik';\nimport { useAuth } from 'hooks';\nimport IconRemove from 'images/icons/IconRemove';\nimport { useState } from 'react';\nimport {\n  BtnBox,\n  StyledButtonWrapper,\n  StyledImputWrap,\n} from './AccountData.styled';\n\nconst AccountData = () => {\n  let { user, error } = useAuth();\n  const [onChange, setOnChange] = useState(null);\n\n  const handleRemoveAccount = () => {\n    console.log('Remove account');\n  };\n\n  const onSubmit = value => {\n    console.log('value', value);\n  };\n\n  const handleRefreshEmail = () => {\n    setOnChange('email');\n  };\n\n  const handleRefreshPassword = () => {\n    setOnChange('password');\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          email: user.email,\n          password: '********',\n        }}\n        // validationSchema={validationDoctorPageSchema}\n        onSubmit={onSubmit}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          setFieldValue,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        }) => {\n          return (\n            <FormStyledPatient as={FormStyled} onSubmit={handleSubmit}>\n              <StyledImputWrap>\n                <Label>\n                  <FieldStyled\n                    disabled={true}\n                    error={errors.email && touched.email && errors.email}\n                    valid={values.email}\n                    type=\"email\"\n                    name=\"email\"\n                    onChange={e => {\n                      error = null;\n                      handleChange(e);\n                    }}\n                    onBlur={handleBlur}\n                    required\n                  />\n                  <ButtonRefresh type=\"button\" onClick={handleRefreshEmail}>\n                    Змінити e-mail\n                  </ButtonRefresh>\n                  {!values.email && <Placeholder>email</Placeholder>}\n                  {errors.email && touched.email && (\n                    <TextError>{errors.email}</TextError>\n                  )}\n                </Label>\n\n                <Label>\n                  <FieldStyled\n                    disabled={true}\n                    error={\n                      errors.password && touched.password && errors.password\n                    }\n                    type={'password'}\n                    name=\"password\"\n                    onChange={e => {\n                      error = null;\n                      handleChange(e);\n                    }}\n                    onBlur={handleBlur}\n                    required\n                  />\n                  <ButtonRefresh type=\"button\" onClick={handleRefreshPassword}>\n                    Змінити пароль\n                  </ButtonRefresh>\n                  {!values.password && <Placeholder>Пароль</Placeholder>}\n                  {errors.password && touched.password && (\n                    <TextError>{errors.password}</TextError>\n                  )}\n                  {error?.status === 401 && (\n                    <TextError>\n                      Електронна пошта або пароль неправильні\n                    </TextError>\n                  )}\n                </Label>\n              </StyledImputWrap>\n\n              <StyledButtonWrapper>\n                <StyledButton\n                  type=\"button\"\n                  onClick={() => handleRemoveAccount()}\n                >\n                  <IconRemove /> Видалити акаунт\n                </StyledButton>\n                <BtnBox>\n                  <Button type=\"button\">\n                    Переглянути картку як користувач\n                  </Button>\n                  <Button type=\"submit\">Зберегти чернетку</Button>\n                  <Button type=\"submit\">Опублікувати</Button>\n                </BtnBox>\n              </StyledButtonWrapper>\n            </FormStyledPatient>\n          );\n        }}\n      </Formik>\n      {onChange === 'email' && (\n        <ModalRefreshEmail setIsOpenModal={() => setOnChange(null)} />\n      )}\n      {onChange === 'password' && (\n        <ModalRefreshPassword setIsOpenModal={() => setOnChange(null)} />\n      )}\n    </>\n  );\n};\n\nexport default AccountData;\n"],"names":["StyledImputWrap","styled","ImputWrap","_templateObject","_taggedTemplateLiteral","StyledButtonWrapper","ButtonWrapper","_templateObject2","BtnBox","_templateObject3","_useAuth","useAuth","user","error","_useState","useState","_useState2","_slicedToArray","onChange","setOnChange","handleRefreshEmail","handleRefreshPassword","_jsxs","_Fragment","children","_jsx","Formik","initialValues","email","password","onSubmit","value","console","log","_ref","_error","values","errors","touched","handleChange","setFieldValue","handleBlur","handleSubmit","FormStyledPatient","as","FormStyled","Label","FieldStyled","disabled","valid","type","name","e","onBlur","required","ButtonRefresh","onClick","Placeholder","TextError","status","StyledButton","IconRemove","Button","ModalRefreshEmail","setIsOpenModal","ModalRefreshPassword"],"sourceRoot":""}